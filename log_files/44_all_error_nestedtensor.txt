Repository: nestedtensor
Checking root directory only to avoid duplication.
test/test_nested_tensor_autograd_functional.py:313:54: TOR201 [*] Parameter `pretrained` is deprecated, please use `weights` instead.
test/test_nested_tensor_integration.py:66:17: TOR201 [*] Parameter `pretrained` is deprecated, please use `weights` instead.
Finished checking 43 files.
[*] 2 potentially fixable with the --fix option
--- /Users/anuragagarwal/Desktop/torchfix/examples/nestedtensor/test/test_nested_tensor_integration.py
+++ /Users/anuragagarwal/Desktop/torchfix/examples/nestedtensor/test/test_nested_tensor_integration.py
@@ -1,10 +1,11 @@
 import torch
 import nestedtensor
 import unittest
 from utils_test_case import TestCase
 from utils import debug_on
+from torchvision import models
 
 try:
     import classy_vision
     TEST_CLASSY_VISION=True
 except ModuleNotFoundError:
@@ -61,11 +62,11 @@
 
 class TestIntegration(TestCase):
     def test_resnet18(self):
         import torchvision
         EXAMPLE_IMAGE_TENSORS = [torch.randn(3, 10, 10) for _ in range(3)]
-        model = torchvision.models.resnet.resnet18(pretrained=True).eval()
+        model = torchvision.models.resnet.resnet18(weights=models.ResNet18_Weights.IMAGENET1K_V1).eval()
         with torch.inference_mode():
             result_model_nt = model(ntnt_nograd(
                 EXAMPLE_IMAGE_TENSORS)).unbind()
             result_model = model(torch.stack(EXAMPLE_IMAGE_TENSORS)).unbind()
         for t0, t1 in zip(result_model_nt, result_model):
--- /Users/anuragagarwal/Desktop/torchfix/examples/nestedtensor/test/test_nested_tensor_autograd_functional.py
+++ /Users/anuragagarwal/Desktop/torchfix/examples/nestedtensor/test/test_nested_tensor_autograd_functional.py
@@ -4,10 +4,11 @@
 from utils_test_case import TestCase
 import random
 from frozen_batch_norm_2d import NTFrozenBatchNorm2d
 from position_encoding import PositionEmbeddingSine
 from joiner import Joiner
+from torchvision import models
 
 
 def ntnt(x): return nestedtensor.nested_tensor(x, requires_grad=True)
 def ntnt_nograd(x): return nestedtensor.nested_tensor(x)
 
@@ -310,11 +311,11 @@
         # Note: It seems expected that layer0 has no gradients.
         return_layers = {"layer1": "0", "layer2": "1",
                          "layer3": "2", "layer4": "3"}
         _test(lambda: Joiner(IntermediateLayerGetter(torchvision.models.resnet50(
             replace_stride_with_dilation=[False, False, False],
-            pretrained=True, norm_layer=NTFrozenBatchNorm2d), return_layers),
+            weights=models.ResNet50_Weights.IMAGENET1K_V1, norm_layer=NTFrozenBatchNorm2d), return_layers),
             PositionEmbeddingSine(128, normalize=True)))
 
     @unittest.skip("Requires autograd support")
     def test_nn_max_pool2d(self):
         data = [
Repository: nestedtensor
